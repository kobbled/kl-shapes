PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'cylinder object'
%NOLOCKGROUP
%UNINITVARS

%defeval BASE_CLASS class_name

%include namespace.m

%include errors.klt
%include systemvars.klt
%include shapes.klt

VAR
  this : t_CYLINDER
  b_colisn : BOOLEAN


%include errors.klh
%from pose.klh %import vector_to_pose, pose_to_vector
%from systemlib.klh %import VEC

--create a box overlay for collision detection
%class boxcyl('box.klc','box.klh')

%include cylinder.klh
%defeval class_name BASE_CLASS

ROUTINE new
  VAR
    v : ARRAY[4] OF VECTOR
  BEGIN
    this.origin = origin
    this.radius = radius
    this.height = height
    -- set if using for collision detection or not
    IF UNINIT(hndl_colsn) THEN
      b_colisn = FALSE
    ELSE
      b_colisn = hndl_colsn
    ENDIF

    IF b_colisn THEN
      --encap cylinder with a collision box
        --box verts
      v[1].x = this.radius ; v[1].y = -1*this.radius ; v[1].z = this.height ;
      v[2].x = -1*this.radius ; v[2].y = -1*this.radius ; v[2].z = this.height ;
      v[3].x = this.radius ; v[3].y = this.radius ; v[3].z = this.height ;
      v[4].x = this.radius ; v[4].y = -1*this.radius ; v[4].z = 0 ;

        --create collision box
      boxcyl__new(v)
    ENDIF

  END new

ROUTINE clear
  VAR
    uninit_pos : XYZWPR
  BEGIN
    this.origin = uninit_pos
    SET_UNINIT_R('class_name', 'this.radius')
    SET_UNINIT_R('class_name', 'this.height')

    --clear collision box
    IF b_colisn THEN
      boxcyl__clear
    ENDIF
  END clear

ROUTINE copy
  BEGIN
    other_box.origin = this.origin
    other_box.radius = this.radius
    other_box.height = this.height
  END copy

ROUTINE point_collision
  VAR
    p_v : VECTOR
    v : ARRAY[4] OF VECTOR
    b : BOOLEAN
  BEGIN
    IF NOT b_colisn THEN
      karelError(INVALID_TYPE_CODE,'collisions must be enabled for class_name', ER_ABORT)
    ENDIF

    --transform point from user frame to origin frame
    p_v = INV((this.origin)):p


    -- check if point is inside box
    b = boxcyl__point_collision(p_v)

    -- if box collision, there is a possible collision
    -- with the cylinder. Check radius projection
    IF b THEN
      --radius of point p with respect to the origin
      -- r^2 = x^2 + y^2
      -- check if point radius is less than object radius
      IF ((p_v.x*p_v.x + p_v.y*p_v.y) < this.radius*this.radius) THEN
        b = TRUE
      ELSE
        b = FALSE
      ENDIF
    ENDIF

    RETURN(b)

  END point_collision


BEGIN
END class_name
